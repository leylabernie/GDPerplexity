// Prisma schema for GlamorousDesi luxury ethnic wear platform
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String      @id @default(cuid())
  email             String      @unique
  name              String?
  password          String?
  emailVerified     DateTime?
  image             String?
  phone             String?
  
  // Authentication
  accounts          Account[]
  sessions          Session[]
  
  // User profile
  dateOfBirth       DateTime?
  gender            Gender?
  preferredLanguage String?     @default("en")
  
  // E-commerce
  orders            Order[]
  reviews           Review[]
  wishlistItems     WishlistItem[]
  cartItems         CartItem[]
  addresses         Address[]
  
  // Wedding planning
  weddingProfile    WeddingProfile?
  styleQuizResults  StyleQuizResult[]
  
  // Tracking
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Product Catalog
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Products
  products        Product[]
  
  // Display
  isActive        Boolean   @default(true)
  sortOrder       Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("categories")
}

model Product {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String?          @db.Text
  shortDescription String?
  
  // Pricing
  basePrice       Decimal          @db.Decimal(10,2)
  salePrice       Decimal?         @db.Decimal(10,2)
  costPrice       Decimal?         @db.Decimal(10,2)
  
  // Inventory
  sku             String           @unique
  stockQuantity   Int              @default(0)
  lowStockLevel   Int              @default(5)
  
  // Media
  images          ProductImage[]
  
  // Categorization
  categoryId      String
  category        Category         @relation(fields: [categoryId], references: [id])
  
  // Product attributes
  attributes      ProductAttribute[]
  variants        ProductVariant[]
  
  // Cultural & Wedding specific
  occasion        Occasion[]
  fabric          String?
  workType        String?          // Embroidery, Zardozi, Mirror work, etc.
  origin          String?          // Region of origin
  artisan         String?          // Artisan or workshop name
  
  // E-commerce
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]
  
  // SEO
  metaTitle       String?
  metaDescription String?
  searchKeywords  String?
  
  // Status
  isActive        Boolean          @default(true)
  isFeatured      Boolean          @default(false)
  
  // Tracking
  viewCount       Int              @default(0)
  salesCount      Int              @default(0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  altText   String?
  sortOrder Int     @default(0)
  
  @@map("product_images")
}

model ProductAttribute {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String  // Size, Color, Length, etc.
  value     String
  
  @@map("product_attributes")
}

model ProductVariant {
  id           String    @id @default(cuid())
  productId    String
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Variant details
  name         String    // e.g., "Red - Medium", "Blue - Large"
  sku          String    @unique
  price        Decimal   @db.Decimal(10,2)
  stockQuantity Int      @default(0)
  
  // Variant attributes
  color        String?
  size         String?
  length       String?   // For sarees, lehengas
  
  // Media
  image        String?
  
  // Status
  isActive     Boolean   @default(true)
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@map("product_variants")
}

// Wedding Planning
model WeddingProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Wedding details
  weddingDate     DateTime?
  venue           String?
  budgetRange     String?   // Under $5000, $5000-$10000, etc.
  guestCount      Int?
  
  // Style preferences
  theme           String?   // Traditional, Modern, Fusion
  colorPalette    String[]  // Preferred colors
  stylePreference String?   // Conservative, Contemporary, Bold
  
  // Measurements
  measurements    Json?     // Flexible measurements storage
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("wedding_profiles")
}

model StyleQuizResult {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Quiz responses
  responses       Json      // Store all quiz responses
  styleProfile    String    // Generated style profile
  recommendations Json      // Product recommendations
  
  createdAt       DateTime  @default(now())
  
  @@map("style_quiz_results")
}

// E-commerce Core
model Cart {
  id        String     @id @default(cuid())
  sessionId String?    @unique
  userId    String?
  items     CartItem[]
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String?
  cart      Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  quantity  Int     @default(1)
  
  // Customization
  customizations Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("cart_items")
}

model Order {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  userId          String?
  user            User?          @relation(fields: [userId], references: [id])
  
  // Order details
  status          OrderStatus    @default(PENDING)
  subtotal        Decimal        @db.Decimal(10,2)
  taxAmount       Decimal        @db.Decimal(10,2)
  shippingAmount  Decimal        @db.Decimal(10,2)
  discountAmount  Decimal        @default(0) @db.Decimal(10,2)
  totalAmount     Decimal        @db.Decimal(10,2)
  
  // Payment
  paymentStatus   PaymentStatus  @default(PENDING)
  paymentMethod   String?
  stripePaymentId String?
  
  // Shipping
  shippingAddress Json
  billingAddress  Json
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Items
  items           OrderItem[]
  
  // Notes
  customerNotes   String?
  adminNotes      String?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@map("orders")
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product @relation(fields: [productId], references: [id])
  
  quantity        Int
  unitPrice       Decimal @db.Decimal(10,2)
  totalPrice      Decimal @db.Decimal(10,2)
  
  // Product snapshot
  productName     String
  productImage    String?
  productSku      String
  
  // Customizations
  customizations  Json?
  
  @@map("order_items")
}

model Address {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        AddressType @default(SHIPPING)
  isDefault   Boolean     @default(false)
  
  firstName   String
  lastName    String
  company     String?
  addressLine1 String
  addressLine2 String?
  city        String
  state       String
  zipCode     String
  country     String      @default("US")
  phone       String?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("addresses")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Review {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  rating    Int     // 1-5 stars
  title     String?
  comment   String? @db.Text
  
  // Helpful votes
  helpfulCount    Int @default(0)
  notHelpfulCount Int @default(0)
  
  // Verification
  isVerifiedPurchase Boolean @default(false)
  
  // Status
  isApproved      Boolean @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("reviews")
}

// Content Management
model BlogPost {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  excerpt         String?
  content         String     @db.Text
  featuredImage   String?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Categorization
  tags            String[]
  category        String?
  
  // Status
  status          PostStatus @default(DRAFT)
  publishedAt     DateTime?
  
  // Author
  authorName      String
  authorImage     String?
  
  // Engagement
  viewCount       Int        @default(0)
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  @@map("blog_posts")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Occasion {
  WEDDING
  ENGAGEMENT
  MEHENDI
  SANGEET
  RECEPTION
  FESTIVAL
  PARTY
  CASUAL
  OFFICE
  RELIGIOUS
}
